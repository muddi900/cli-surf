{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cli-surf","text":"<p>cli-surf is a simple command line tool (with a frontend too!) that sends custom ocean/surf report data!</p>"},{"location":"faq/","title":"FAQ","text":"<p>FAQ coming soon...</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#fork-the-repository","title":"Fork the repository","text":"<ul> <li>Press Fork on the repository's page (or click here)</li> <li>Press Create fork</li> <li>On Github, navigate to your fork of the repository</li> <li>Click on &lt;&gt; Code</li> <li>Copy the URL for the repository</li> </ul>"},{"location":"install/#cloning-the-forked-repository","title":"Cloning the forked repository","text":"<p>Open your terminal and naviagate to the directory you want the fork to be in</p> <pre><code>git clone &lt;fork URL&gt;\n\nExample: git clone https://github.com/ryansurf/cli-surf.git\n</code></pre>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#environment-variables","title":"Environment Variables","text":"<ul> <li>Copy the variables from <code>.env.example</code> to <code>.env</code></li> </ul> <pre><code>cp .env.example .env\n</code></pre> <ul> <li>Edit the environment variables if necessary (see settings)</li> </ul>"},{"location":"structure/","title":"Structure","text":"<p>The basic structure of the project is:</p> <pre><code>\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 images\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 __pycache__\n\u2502   \u251c\u2500\u2500 static\n\u2502   \u2514\u2500\u2500 templates\n\u251c\u2500\u2500 tests\n</code></pre> <ul> <li><code>docs</code>: Contains markdown for the documentation (this website!)</li> <li><code>images</code>: Images/GIFs/Media</li> <li><code>src</code>: Source code!<ul> <li><code>src/static</code>: JavaScript</li> <li><code>src/templates</code>: HTML</li> </ul> </li> <li><code>tests</code>: Testing files</li> </ul> <p>More in-depth structure:</p> <pre><code>\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 faq.md\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 install.md\n\u2502   \u251c\u2500\u2500 setup.md\n\u2502   \u251c\u2500\u2500 structure.md\n\u2502   \u251c\u2500\u2500 styling.md\n\u2502   \u2514\u2500\u2500 tests.md\n\u251c\u2500\u2500 help.txt\n\u251c\u2500\u2500 images\n\u2502   \u251c\u2500\u2500 ocean.gif\n\u2502   \u251c\u2500\u2500 surf.gif\n\u2502   \u251c\u2500\u2500 wave.png\n\u2502   \u2514\u2500\u2500 website.gif\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 api.py\n\u2502   \u251c\u2500\u2500 art.py\n\u2502   \u251c\u2500\u2500 cli.py\n\u2502   \u251c\u2500\u2500 helper.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 __pycache__\n\u2502   \u251c\u2500\u2500 send_email.py\n\u2502   \u251c\u2500\u2500 server.py\n\u2502   \u251c\u2500\u2500 static\n\u2502   \u2514\u2500\u2500 templates\n\u251c\u2500\u2500 start_venv.sh\n\u251c\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_code.py\n</code></pre>"},{"location":"styling/","title":"Styling","text":""},{"location":"styling/#code-style-and-quality","title":"Code Style and Quality","text":"<p>The PEP 8 styling convention is used.</p> <p>This is achieved using the ruff Linter and Formatter.</p> <p>The Linter and Formatter are automatically executed before committing via pre-commit.</p> <p>If you want to run the Linter and Formatter at any time, execute <code>pre-commit run --all-files</code>.</p>"},{"location":"tests/","title":"Tests","text":"<p>To run tests, install pytest, <code>pip install pytest</code> and navigate to <code>/test</code>.</p> <p>Run <code>pytest</code></p> <p>On a push/pull request, git will run <code>pytest</code> for you to catch any errors.</p>"},{"location":"tests/#writing-tests","title":"Writing Tests","text":"<p>In <code>/tests</code>, there are multiple files for different types of test cases.</p> <ul> <li><code>test_helper.py</code>: Tests functions in <code>src/helper.py</code> (functions like rounding decimals, etc.)</li> <li><code>test_api.py</code>: Tests functions in <code>src/api.py</code>.</li> <li><code>test_server.py</code>: Tests the Flask server in <code>src/server/py</code></li> </ul> <p>Writing tests is encouraged, especially if you introduce a new function/feature!</p>"}]}